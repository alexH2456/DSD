// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/29/2017 21:54:26"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g03_lab2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g03_lab2_vlg_sample_tst(
	clock,
	code,
	Data_in,
	mode,
	N,
	Parity_in,
	seed,
	sampler_tx
);
input  clock;
input [3:0] code;
input [3:0] Data_in;
input  mode;
input [5:0] N;
input  Parity_in;
input [31:0] seed;
output sampler_tx;

reg sample;
time current_time;
always @(clock or code or Data_in or mode or N or Parity_in or seed)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g03_lab2_vlg_check_tst (
	P_EN,
	Par_out,
	rand,
	segments_out,
	sampler_rx
);
input [51:0] P_EN;
input  Par_out;
input [31:0] rand;
input [6:0] segments_out;
input sampler_rx;

reg [51:0] P_EN_expected;
reg  Par_out_expected;
reg [31:0] rand_expected;
reg [6:0] segments_out_expected;

reg [51:0] P_EN_prev;
reg  Par_out_prev;
reg [31:0] rand_prev;
reg [6:0] segments_out_prev;

reg  Par_out_expected_prev;

reg  last_Par_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	P_EN_prev = P_EN;
	Par_out_prev = Par_out;
	rand_prev = rand;
	segments_out_prev = segments_out;
end

// update expected /o prevs

always @(trigger)
begin
	Par_out_expected_prev = Par_out_expected;
end



// expected Par_out
initial
begin
	Par_out_expected = 1'bX;
end 
// generate trigger
always @(P_EN_expected or P_EN or Par_out_expected or Par_out or rand_expected or rand or segments_out_expected or segments_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected P_EN = %b | expected Par_out = %b | expected rand = %b | expected segments_out = %b | ",P_EN_expected_prev,Par_out_expected_prev,rand_expected_prev,segments_out_expected_prev);
	$display("| real P_EN = %b | real Par_out = %b | real rand = %b | real segments_out = %b | ",P_EN_prev,Par_out_prev,rand_prev,segments_out_prev);
`endif
	if (
		( Par_out_expected_prev !== 1'bx ) && ( Par_out_prev !== Par_out_expected_prev )
		&& ((Par_out_expected_prev !== last_Par_out_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Par_out :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Par_out_expected_prev);
		$display ("     Real value = %b", Par_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Par_out_exp = Par_out_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g03_lab2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [3:0] code;
reg [3:0] Data_in;
reg mode;
reg [5:0] N;
reg Parity_in;
reg [31:0] seed;
// wires                                               
wire [51:0] P_EN;
wire Par_out;
wire [31:0] rand;
wire [6:0] segments_out;

wire sampler;                             

// assign statements (if any)                          
g03_lab2 i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.code(code),
	.Data_in(Data_in),
	.mode(mode),
	.N(N),
	.P_EN(P_EN),
	.Par_out(Par_out),
	.Parity_in(Parity_in),
	.\rand (rand),
	.seed(seed),
	.segments_out(segments_out)
);
// Data_in[ 3 ]
initial
begin
	Data_in[3] = 1'b0;
	Data_in[3] = #400000 1'b1;
	Data_in[3] = #400000 1'b0;
end 
// Data_in[ 2 ]
initial
begin
	repeat(2)
	begin
		Data_in[2] = 1'b0;
		Data_in[2] = #200000 1'b1;
		# 200000;
	end
	Data_in[2] = 1'b0;
end 
// Data_in[ 1 ]
always
begin
	Data_in[1] = 1'b0;
	Data_in[1] = #100000 1'b1;
	#100000;
end 
// Data_in[ 0 ]
always
begin
	Data_in[0] = 1'b0;
	Data_in[0] = #50000 1'b1;
	#50000;
end 

// Parity_in
initial
begin
	Parity_in = 1'b1;
end 

g03_lab2_vlg_sample_tst tb_sample (
	.clock(clock),
	.code(code),
	.Data_in(Data_in),
	.mode(mode),
	.N(N),
	.Parity_in(Parity_in),
	.seed(seed),
	.sampler_tx(sampler)
);

g03_lab2_vlg_check_tst tb_out(
	.P_EN(P_EN),
	.Par_out(Par_out),
	.rand(rand),
	.segments_out(segments_out),
	.sampler_rx(sampler)
);
endmodule

