// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/08/2017 17:09:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g03_stack52
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g03_stack52_vlg_sample_tst(
	address,
	clock,
	data,
	enable,
	mode,
	reset,
	sampler_tx
);
input [5:0] address;
input  clock;
input [5:0] data;
input  enable;
input [1:0] mode;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(address or clock or data or enable or mode or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g03_stack52_vlg_check_tst (
	empty,
	full,
	num,
	value0,
	value1,
	value2,
	value3,
	value4,
	value5,
	sampler_rx
);
input  empty;
input  full;
input [5:0] num;
input  value0;
input  value1;
input  value2;
input  value3;
input  value4;
input  value5;
input sampler_rx;

reg  empty_expected;
reg  full_expected;
reg [5:0] num_expected;
reg  value0_expected;
reg  value1_expected;
reg  value2_expected;
reg  value3_expected;
reg  value4_expected;
reg  value5_expected;

reg  empty_prev;
reg  full_prev;
reg [5:0] num_prev;
reg  value0_prev;
reg  value1_prev;
reg  value2_prev;
reg  value3_prev;
reg  value4_prev;
reg  value5_prev;

reg  empty_expected_prev;
reg  full_expected_prev;
reg [5:0] num_expected_prev;
reg  value0_expected_prev;
reg  value1_expected_prev;
reg  value2_expected_prev;
reg  value3_expected_prev;
reg  value4_expected_prev;
reg  value5_expected_prev;

reg  last_empty_exp;
reg  last_full_exp;
reg [5:0] last_num_exp;
reg  last_value0_exp;
reg  last_value1_exp;
reg  last_value2_exp;
reg  last_value3_exp;
reg  last_value4_exp;
reg  last_value5_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	empty_prev = empty;
	full_prev = full;
	num_prev = num;
	value0_prev = value0;
	value1_prev = value1;
	value2_prev = value2;
	value3_prev = value3;
	value4_prev = value4;
	value5_prev = value5;
end

// update expected /o prevs

always @(trigger)
begin
	empty_expected_prev = empty_expected;
	full_expected_prev = full_expected;
	num_expected_prev = num_expected;
	value0_expected_prev = value0_expected;
	value1_expected_prev = value1_expected;
	value2_expected_prev = value2_expected;
	value3_expected_prev = value3_expected;
	value4_expected_prev = value4_expected;
	value5_expected_prev = value5_expected;
end



// expected empty
initial
begin
	empty_expected = 1'bX;
end 

// expected full
initial
begin
	full_expected = 1'bX;
end 

// expected value5
initial
begin
	value5_expected = 1'bX;
end 

// expected value4
initial
begin
	value4_expected = 1'bX;
end 

// expected value3
initial
begin
	value3_expected = 1'bX;
end 

// expected value2
initial
begin
	value2_expected = 1'bX;
end 

// expected value1
initial
begin
	value1_expected = 1'bX;
end 

// expected value0
initial
begin
	value0_expected = 1'bX;
end 
// expected num[ 5 ]
initial
begin
	num_expected[5] = 1'bX;
end 
// expected num[ 4 ]
initial
begin
	num_expected[4] = 1'bX;
end 
// expected num[ 3 ]
initial
begin
	num_expected[3] = 1'bX;
end 
// expected num[ 2 ]
initial
begin
	num_expected[2] = 1'bX;
end 
// expected num[ 1 ]
initial
begin
	num_expected[1] = 1'bX;
end 
// expected num[ 0 ]
initial
begin
	num_expected[0] = 1'bX;
end 
// generate trigger
always @(empty_expected or empty or full_expected or full or num_expected or num or value0_expected or value0 or value1_expected or value1 or value2_expected or value2 or value3_expected or value3 or value4_expected or value4 or value5_expected or value5)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected empty = %b | expected full = %b | expected num = %b | expected value0 = %b | expected value1 = %b | expected value2 = %b | expected value3 = %b | expected value4 = %b | expected value5 = %b | ",empty_expected_prev,full_expected_prev,num_expected_prev,value0_expected_prev,value1_expected_prev,value2_expected_prev,value3_expected_prev,value4_expected_prev,value5_expected_prev);
	$display("| real empty = %b | real full = %b | real num = %b | real value0 = %b | real value1 = %b | real value2 = %b | real value3 = %b | real value4 = %b | real value5 = %b | ",empty_prev,full_prev,num_prev,value0_prev,value1_prev,value2_prev,value3_prev,value4_prev,value5_prev);
`endif
	if (
		( empty_expected_prev !== 1'bx ) && ( empty_prev !== empty_expected_prev )
		&& ((empty_expected_prev !== last_empty_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", empty_expected_prev);
		$display ("     Real value = %b", empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_empty_exp = empty_expected_prev;
	end
	if (
		( full_expected_prev !== 1'bx ) && ( full_prev !== full_expected_prev )
		&& ((full_expected_prev !== last_full_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", full_expected_prev);
		$display ("     Real value = %b", full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_full_exp = full_expected_prev;
	end
	if (
		( num_expected_prev[0] !== 1'bx ) && ( num_prev[0] !== num_expected_prev[0] )
		&& ((num_expected_prev[0] !== last_num_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[0] = num_expected_prev[0];
	end
	if (
		( num_expected_prev[1] !== 1'bx ) && ( num_prev[1] !== num_expected_prev[1] )
		&& ((num_expected_prev[1] !== last_num_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[1] = num_expected_prev[1];
	end
	if (
		( num_expected_prev[2] !== 1'bx ) && ( num_prev[2] !== num_expected_prev[2] )
		&& ((num_expected_prev[2] !== last_num_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[2] = num_expected_prev[2];
	end
	if (
		( num_expected_prev[3] !== 1'bx ) && ( num_prev[3] !== num_expected_prev[3] )
		&& ((num_expected_prev[3] !== last_num_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[3] = num_expected_prev[3];
	end
	if (
		( num_expected_prev[4] !== 1'bx ) && ( num_prev[4] !== num_expected_prev[4] )
		&& ((num_expected_prev[4] !== last_num_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[4] = num_expected_prev[4];
	end
	if (
		( num_expected_prev[5] !== 1'bx ) && ( num_prev[5] !== num_expected_prev[5] )
		&& ((num_expected_prev[5] !== last_num_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_expected_prev);
		$display ("     Real value = %b", num_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_num_exp[5] = num_expected_prev[5];
	end
	if (
		( value0_expected_prev !== 1'bx ) && ( value0_prev !== value0_expected_prev )
		&& ((value0_expected_prev !== last_value0_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value0_expected_prev);
		$display ("     Real value = %b", value0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_value0_exp = value0_expected_prev;
	end
	if (
		( value1_expected_prev !== 1'bx ) && ( value1_prev !== value1_expected_prev )
		&& ((value1_expected_prev !== last_value1_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value1_expected_prev);
		$display ("     Real value = %b", value1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_value1_exp = value1_expected_prev;
	end
	if (
		( value2_expected_prev !== 1'bx ) && ( value2_prev !== value2_expected_prev )
		&& ((value2_expected_prev !== last_value2_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value2_expected_prev);
		$display ("     Real value = %b", value2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_value2_exp = value2_expected_prev;
	end
	if (
		( value3_expected_prev !== 1'bx ) && ( value3_prev !== value3_expected_prev )
		&& ((value3_expected_prev !== last_value3_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value3_expected_prev);
		$display ("     Real value = %b", value3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_value3_exp = value3_expected_prev;
	end
	if (
		( value4_expected_prev !== 1'bx ) && ( value4_prev !== value4_expected_prev )
		&& ((value4_expected_prev !== last_value4_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value4_expected_prev);
		$display ("     Real value = %b", value4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_value4_exp = value4_expected_prev;
	end
	if (
		( value5_expected_prev !== 1'bx ) && ( value5_prev !== value5_expected_prev )
		&& ((value5_expected_prev !== last_value5_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port value5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", value5_expected_prev);
		$display ("     Real value = %b", value5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_value5_exp = value5_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g03_stack52_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [5:0] address;
reg clock;
reg [5:0] data;
reg enable;
reg [1:0] mode;
reg reset;
// wires                                               
wire empty;
wire full;
wire [5:0] num;
wire value0;
wire value1;
wire value2;
wire value3;
wire value4;
wire value5;

wire sampler;                             

// assign statements (if any)                          
g03_stack52 i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clock(clock),
	.data(data),
	.empty(empty),
	.enable(enable),
	.full(full),
	.mode(mode),
	.num(num),
	.reset(reset),
	.value0(value0),
	.value1(value1),
	.value2(value2),
	.value3(value3),
	.value4(value4),
	.value5(value5)
);
// data[ 5 ]
initial
begin
	data[5] = 1'b0;
end 
// data[ 4 ]
initial
begin
	data[4] = 1'b0;
end 
// data[ 3 ]
initial
begin
	data[3] = 1'b1;
end 
// data[ 2 ]
initial
begin
	data[2] = 1'b0;
end 
// data[ 1 ]
initial
begin
	data[1] = 1'b1;
end 
// data[ 0 ]
initial
begin
	data[0] = 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
	address[3] = #760000 1'b1;
	address[3] = #190000 1'b0;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b0;
	address[2] = #600000 1'b1;
	address[2] = #160000 1'b0;
	address[2] = #160000 1'b1;
	address[2] = #30000 1'b0;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b0;
	address[1] = #520000 1'b1;
	# 80000;
	repeat(2)
	begin
		address[1] = 1'b0;
		address[1] = #80000 1'b1;
		# 80000;
	end
	address[1] = 1'b0;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b1;
	# 440000;
	repeat(6)
	begin
		address[0] = 1'b0;
		address[0] = #40000 1'b1;
		# 40000;
	end
	address[0] = 1'b0;
end 
// mode[ 1 ]
initial
begin
	mode[1] = 1'b0;
	mode[1] = #50000 1'b1;
	mode[1] = #180000 1'b0;
	mode[1] = #740000 1'b1;
end 
// mode[ 0 ]
initial
begin
	mode[0] = 1'b1;
	mode[0] = #50000 1'b0;
	mode[0] = #60000 1'b1;
	mode[0] = #120000 1'b0;
	mode[0] = #140000 1'b1;
	mode[0] = #60000 1'b0;
end 

// enable
initial
begin
	enable = 1'b1;
	enable = #290000 1'b0;
	enable = #20000 1'b1;
	enable = #60000 1'b0;
	enable = #30000 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #290000 1'b1;
	reset = #30000 1'b0;
end 

g03_stack52_vlg_sample_tst tb_sample (
	.address(address),
	.clock(clock),
	.data(data),
	.enable(enable),
	.mode(mode),
	.reset(reset),
	.sampler_tx(sampler)
);

g03_stack52_vlg_check_tst tb_out(
	.empty(empty),
	.full(full),
	.num(num),
	.value0(value0),
	.value1(value1),
	.value2(value2),
	.value3(value3),
	.value4(value4),
	.value5(value5),
	.sampler_rx(sampler)
);
endmodule

