// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/04/2017 18:38:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    g03_lab5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module g03_lab5_vlg_sample_tst(
	clk,
	hit,
	led_mode,
	new_hand,
	reset,
	stay,
	sampler_tx
);
input  clk;
input  hit;
input  led_mode;
input  new_hand;
input  reset;
input  stay;
output sampler_tx;

reg sample;
time current_time;
always @(clk or hit or led_mode or new_hand or reset or stay)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module g03_lab5_vlg_check_tst (
	dealer_hand,
	dealer_led0,
	dealer_led1,
	dealer_led2,
	dealer_wins,
	game_over,
	led_floor_dealer,
	led_floor_player,
	led_mod_dealer,
	led_mod_player,
	num_cards,
	player_hand,
	player_led0,
	player_led1,
	player_led2,
	player_wins,
	state_out,
	sampler_rx
);
input [5:0] dealer_hand;
input  dealer_led0;
input  dealer_led1;
input  dealer_led2;
input [1:0] dealer_wins;
input  game_over;
input [6:0] led_floor_dealer;
input [6:0] led_floor_player;
input [6:0] led_mod_dealer;
input [6:0] led_mod_player;
input [5:0] num_cards;
input [5:0] player_hand;
input  player_led0;
input  player_led1;
input  player_led2;
input [1:0] player_wins;
input [3:0] state_out;
input sampler_rx;

reg [5:0] dealer_hand_expected;
reg  dealer_led0_expected;
reg  dealer_led1_expected;
reg  dealer_led2_expected;
reg [1:0] dealer_wins_expected;
reg  game_over_expected;
reg [6:0] led_floor_dealer_expected;
reg [6:0] led_floor_player_expected;
reg [6:0] led_mod_dealer_expected;
reg [6:0] led_mod_player_expected;
reg [5:0] num_cards_expected;
reg [5:0] player_hand_expected;
reg  player_led0_expected;
reg  player_led1_expected;
reg  player_led2_expected;
reg [1:0] player_wins_expected;
reg [3:0] state_out_expected;

reg [5:0] dealer_hand_prev;
reg  dealer_led0_prev;
reg  dealer_led1_prev;
reg  dealer_led2_prev;
reg [1:0] dealer_wins_prev;
reg  game_over_prev;
reg [6:0] led_floor_dealer_prev;
reg [6:0] led_floor_player_prev;
reg [6:0] led_mod_dealer_prev;
reg [6:0] led_mod_player_prev;
reg [5:0] num_cards_prev;
reg [5:0] player_hand_prev;
reg  player_led0_prev;
reg  player_led1_prev;
reg  player_led2_prev;
reg [1:0] player_wins_prev;
reg [3:0] state_out_prev;

reg [5:0] dealer_hand_expected_prev;
reg [1:0] dealer_wins_expected_prev;
reg  game_over_expected_prev;
reg [5:0] num_cards_expected_prev;
reg [5:0] player_hand_expected_prev;
reg [1:0] player_wins_expected_prev;

reg [5:0] last_dealer_hand_exp;
reg [1:0] last_dealer_wins_exp;
reg  last_game_over_exp;
reg [5:0] last_num_cards_exp;
reg [5:0] last_player_hand_exp;
reg [1:0] last_player_wins_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:17] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 17'b1;
end

// update real /o prevs

always @(trigger)
begin
	dealer_hand_prev = dealer_hand;
	dealer_led0_prev = dealer_led0;
	dealer_led1_prev = dealer_led1;
	dealer_led2_prev = dealer_led2;
	dealer_wins_prev = dealer_wins;
	game_over_prev = game_over;
	led_floor_dealer_prev = led_floor_dealer;
	led_floor_player_prev = led_floor_player;
	led_mod_dealer_prev = led_mod_dealer;
	led_mod_player_prev = led_mod_player;
	num_cards_prev = num_cards;
	player_hand_prev = player_hand;
	player_led0_prev = player_led0;
	player_led1_prev = player_led1;
	player_led2_prev = player_led2;
	player_wins_prev = player_wins;
	state_out_prev = state_out;
end

// update expected /o prevs

always @(trigger)
begin
	dealer_hand_expected_prev = dealer_hand_expected;
	dealer_wins_expected_prev = dealer_wins_expected;
	game_over_expected_prev = game_over_expected;
	num_cards_expected_prev = num_cards_expected;
	player_hand_expected_prev = player_hand_expected;
	player_wins_expected_prev = player_wins_expected;
end


// expected dealer_hand[ 5 ]
initial
begin
	dealer_hand_expected[5] = 1'bX;
end 
// expected dealer_hand[ 4 ]
initial
begin
	dealer_hand_expected[4] = 1'bX;
end 
// expected dealer_hand[ 3 ]
initial
begin
	dealer_hand_expected[3] = 1'bX;
end 
// expected dealer_hand[ 2 ]
initial
begin
	dealer_hand_expected[2] = 1'bX;
end 
// expected dealer_hand[ 1 ]
initial
begin
	dealer_hand_expected[1] = 1'bX;
end 
// expected dealer_hand[ 0 ]
initial
begin
	dealer_hand_expected[0] = 1'bX;
end 
// expected player_hand[ 5 ]
initial
begin
	player_hand_expected[5] = 1'bX;
end 
// expected player_hand[ 4 ]
initial
begin
	player_hand_expected[4] = 1'bX;
end 
// expected player_hand[ 3 ]
initial
begin
	player_hand_expected[3] = 1'bX;
end 
// expected player_hand[ 2 ]
initial
begin
	player_hand_expected[2] = 1'bX;
end 
// expected player_hand[ 1 ]
initial
begin
	player_hand_expected[1] = 1'bX;
end 
// expected player_hand[ 0 ]
initial
begin
	player_hand_expected[0] = 1'bX;
end 
// expected player_wins[ 1 ]
initial
begin
	player_wins_expected[1] = 1'bX;
end 
// expected player_wins[ 0 ]
initial
begin
	player_wins_expected[0] = 1'bX;
end 
// expected dealer_wins[ 1 ]
initial
begin
	dealer_wins_expected[1] = 1'bX;
end 
// expected dealer_wins[ 0 ]
initial
begin
	dealer_wins_expected[0] = 1'bX;
end 
// expected num_cards[ 5 ]
initial
begin
	num_cards_expected[5] = 1'bX;
end 
// expected num_cards[ 4 ]
initial
begin
	num_cards_expected[4] = 1'bX;
end 
// expected num_cards[ 3 ]
initial
begin
	num_cards_expected[3] = 1'bX;
end 
// expected num_cards[ 2 ]
initial
begin
	num_cards_expected[2] = 1'bX;
end 
// expected num_cards[ 1 ]
initial
begin
	num_cards_expected[1] = 1'bX;
end 
// expected num_cards[ 0 ]
initial
begin
	num_cards_expected[0] = 1'bX;
end 

// expected game_over
initial
begin
	game_over_expected = 1'bX;
end 
// generate trigger
always @(dealer_hand_expected or dealer_hand or dealer_led0_expected or dealer_led0 or dealer_led1_expected or dealer_led1 or dealer_led2_expected or dealer_led2 or dealer_wins_expected or dealer_wins or game_over_expected or game_over or led_floor_dealer_expected or led_floor_dealer or led_floor_player_expected or led_floor_player or led_mod_dealer_expected or led_mod_dealer or led_mod_player_expected or led_mod_player or num_cards_expected or num_cards or player_hand_expected or player_hand or player_led0_expected or player_led0 or player_led1_expected or player_led1 or player_led2_expected or player_led2 or player_wins_expected or player_wins or state_out_expected or state_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected dealer_hand = %b | expected dealer_led0 = %b | expected dealer_led1 = %b | expected dealer_led2 = %b | expected dealer_wins = %b | expected game_over = %b | expected led_floor_dealer = %b | expected led_floor_player = %b | expected led_mod_dealer = %b | expected led_mod_player = %b | expected num_cards = %b | expected player_hand = %b | expected player_led0 = %b | expected player_led1 = %b | expected player_led2 = %b | expected player_wins = %b | expected state_out = %b | ",dealer_hand_expected_prev,dealer_led0_expected_prev,dealer_led1_expected_prev,dealer_led2_expected_prev,dealer_wins_expected_prev,game_over_expected_prev,led_floor_dealer_expected_prev,led_floor_player_expected_prev,led_mod_dealer_expected_prev,led_mod_player_expected_prev,num_cards_expected_prev,player_hand_expected_prev,player_led0_expected_prev,player_led1_expected_prev,player_led2_expected_prev,player_wins_expected_prev,state_out_expected_prev);
	$display("| real dealer_hand = %b | real dealer_led0 = %b | real dealer_led1 = %b | real dealer_led2 = %b | real dealer_wins = %b | real game_over = %b | real led_floor_dealer = %b | real led_floor_player = %b | real led_mod_dealer = %b | real led_mod_player = %b | real num_cards = %b | real player_hand = %b | real player_led0 = %b | real player_led1 = %b | real player_led2 = %b | real player_wins = %b | real state_out = %b | ",dealer_hand_prev,dealer_led0_prev,dealer_led1_prev,dealer_led2_prev,dealer_wins_prev,game_over_prev,led_floor_dealer_prev,led_floor_player_prev,led_mod_dealer_prev,led_mod_player_prev,num_cards_prev,player_hand_prev,player_led0_prev,player_led1_prev,player_led2_prev,player_wins_prev,state_out_prev);
`endif
	if (
		( dealer_hand_expected_prev[0] !== 1'bx ) && ( dealer_hand_prev[0] !== dealer_hand_expected_prev[0] )
		&& ((dealer_hand_expected_prev[0] !== last_dealer_hand_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dealer_hand[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dealer_hand_expected_prev);
		$display ("     Real value = %b", dealer_hand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dealer_hand_exp[0] = dealer_hand_expected_prev[0];
	end
	if (
		( dealer_hand_expected_prev[1] !== 1'bx ) && ( dealer_hand_prev[1] !== dealer_hand_expected_prev[1] )
		&& ((dealer_hand_expected_prev[1] !== last_dealer_hand_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dealer_hand[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dealer_hand_expected_prev);
		$display ("     Real value = %b", dealer_hand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dealer_hand_exp[1] = dealer_hand_expected_prev[1];
	end
	if (
		( dealer_hand_expected_prev[2] !== 1'bx ) && ( dealer_hand_prev[2] !== dealer_hand_expected_prev[2] )
		&& ((dealer_hand_expected_prev[2] !== last_dealer_hand_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dealer_hand[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dealer_hand_expected_prev);
		$display ("     Real value = %b", dealer_hand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dealer_hand_exp[2] = dealer_hand_expected_prev[2];
	end
	if (
		( dealer_hand_expected_prev[3] !== 1'bx ) && ( dealer_hand_prev[3] !== dealer_hand_expected_prev[3] )
		&& ((dealer_hand_expected_prev[3] !== last_dealer_hand_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dealer_hand[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dealer_hand_expected_prev);
		$display ("     Real value = %b", dealer_hand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dealer_hand_exp[3] = dealer_hand_expected_prev[3];
	end
	if (
		( dealer_hand_expected_prev[4] !== 1'bx ) && ( dealer_hand_prev[4] !== dealer_hand_expected_prev[4] )
		&& ((dealer_hand_expected_prev[4] !== last_dealer_hand_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dealer_hand[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dealer_hand_expected_prev);
		$display ("     Real value = %b", dealer_hand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dealer_hand_exp[4] = dealer_hand_expected_prev[4];
	end
	if (
		( dealer_hand_expected_prev[5] !== 1'bx ) && ( dealer_hand_prev[5] !== dealer_hand_expected_prev[5] )
		&& ((dealer_hand_expected_prev[5] !== last_dealer_hand_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dealer_hand[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dealer_hand_expected_prev);
		$display ("     Real value = %b", dealer_hand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_dealer_hand_exp[5] = dealer_hand_expected_prev[5];
	end
	if (
		( dealer_wins_expected_prev[0] !== 1'bx ) && ( dealer_wins_prev[0] !== dealer_wins_expected_prev[0] )
		&& ((dealer_wins_expected_prev[0] !== last_dealer_wins_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dealer_wins[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dealer_wins_expected_prev);
		$display ("     Real value = %b", dealer_wins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_dealer_wins_exp[0] = dealer_wins_expected_prev[0];
	end
	if (
		( dealer_wins_expected_prev[1] !== 1'bx ) && ( dealer_wins_prev[1] !== dealer_wins_expected_prev[1] )
		&& ((dealer_wins_expected_prev[1] !== last_dealer_wins_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dealer_wins[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dealer_wins_expected_prev);
		$display ("     Real value = %b", dealer_wins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_dealer_wins_exp[1] = dealer_wins_expected_prev[1];
	end
	if (
		( game_over_expected_prev !== 1'bx ) && ( game_over_prev !== game_over_expected_prev )
		&& ((game_over_expected_prev !== last_game_over_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port game_over :: @time = %t",  $realtime);
		$display ("     Expected value = %b", game_over_expected_prev);
		$display ("     Real value = %b", game_over_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_game_over_exp = game_over_expected_prev;
	end
	if (
		( num_cards_expected_prev[0] !== 1'bx ) && ( num_cards_prev[0] !== num_cards_expected_prev[0] )
		&& ((num_cards_expected_prev[0] !== last_num_cards_exp[0]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_cards[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_cards_expected_prev);
		$display ("     Real value = %b", num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_num_cards_exp[0] = num_cards_expected_prev[0];
	end
	if (
		( num_cards_expected_prev[1] !== 1'bx ) && ( num_cards_prev[1] !== num_cards_expected_prev[1] )
		&& ((num_cards_expected_prev[1] !== last_num_cards_exp[1]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_cards[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_cards_expected_prev);
		$display ("     Real value = %b", num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_num_cards_exp[1] = num_cards_expected_prev[1];
	end
	if (
		( num_cards_expected_prev[2] !== 1'bx ) && ( num_cards_prev[2] !== num_cards_expected_prev[2] )
		&& ((num_cards_expected_prev[2] !== last_num_cards_exp[2]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_cards[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_cards_expected_prev);
		$display ("     Real value = %b", num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_num_cards_exp[2] = num_cards_expected_prev[2];
	end
	if (
		( num_cards_expected_prev[3] !== 1'bx ) && ( num_cards_prev[3] !== num_cards_expected_prev[3] )
		&& ((num_cards_expected_prev[3] !== last_num_cards_exp[3]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_cards[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_cards_expected_prev);
		$display ("     Real value = %b", num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_num_cards_exp[3] = num_cards_expected_prev[3];
	end
	if (
		( num_cards_expected_prev[4] !== 1'bx ) && ( num_cards_prev[4] !== num_cards_expected_prev[4] )
		&& ((num_cards_expected_prev[4] !== last_num_cards_exp[4]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_cards[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_cards_expected_prev);
		$display ("     Real value = %b", num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_num_cards_exp[4] = num_cards_expected_prev[4];
	end
	if (
		( num_cards_expected_prev[5] !== 1'bx ) && ( num_cards_prev[5] !== num_cards_expected_prev[5] )
		&& ((num_cards_expected_prev[5] !== last_num_cards_exp[5]) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port num_cards[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", num_cards_expected_prev);
		$display ("     Real value = %b", num_cards_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_num_cards_exp[5] = num_cards_expected_prev[5];
	end
	if (
		( player_hand_expected_prev[0] !== 1'bx ) && ( player_hand_prev[0] !== player_hand_expected_prev[0] )
		&& ((player_hand_expected_prev[0] !== last_player_hand_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_hand[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_hand_expected_prev);
		$display ("     Real value = %b", player_hand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_player_hand_exp[0] = player_hand_expected_prev[0];
	end
	if (
		( player_hand_expected_prev[1] !== 1'bx ) && ( player_hand_prev[1] !== player_hand_expected_prev[1] )
		&& ((player_hand_expected_prev[1] !== last_player_hand_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_hand[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_hand_expected_prev);
		$display ("     Real value = %b", player_hand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_player_hand_exp[1] = player_hand_expected_prev[1];
	end
	if (
		( player_hand_expected_prev[2] !== 1'bx ) && ( player_hand_prev[2] !== player_hand_expected_prev[2] )
		&& ((player_hand_expected_prev[2] !== last_player_hand_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_hand[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_hand_expected_prev);
		$display ("     Real value = %b", player_hand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_player_hand_exp[2] = player_hand_expected_prev[2];
	end
	if (
		( player_hand_expected_prev[3] !== 1'bx ) && ( player_hand_prev[3] !== player_hand_expected_prev[3] )
		&& ((player_hand_expected_prev[3] !== last_player_hand_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_hand[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_hand_expected_prev);
		$display ("     Real value = %b", player_hand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_player_hand_exp[3] = player_hand_expected_prev[3];
	end
	if (
		( player_hand_expected_prev[4] !== 1'bx ) && ( player_hand_prev[4] !== player_hand_expected_prev[4] )
		&& ((player_hand_expected_prev[4] !== last_player_hand_exp[4]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_hand[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_hand_expected_prev);
		$display ("     Real value = %b", player_hand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_player_hand_exp[4] = player_hand_expected_prev[4];
	end
	if (
		( player_hand_expected_prev[5] !== 1'bx ) && ( player_hand_prev[5] !== player_hand_expected_prev[5] )
		&& ((player_hand_expected_prev[5] !== last_player_hand_exp[5]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_hand[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_hand_expected_prev);
		$display ("     Real value = %b", player_hand_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_player_hand_exp[5] = player_hand_expected_prev[5];
	end
	if (
		( player_wins_expected_prev[0] !== 1'bx ) && ( player_wins_prev[0] !== player_wins_expected_prev[0] )
		&& ((player_wins_expected_prev[0] !== last_player_wins_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_wins[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_wins_expected_prev);
		$display ("     Real value = %b", player_wins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_player_wins_exp[0] = player_wins_expected_prev[0];
	end
	if (
		( player_wins_expected_prev[1] !== 1'bx ) && ( player_wins_prev[1] !== player_wins_expected_prev[1] )
		&& ((player_wins_expected_prev[1] !== last_player_wins_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port player_wins[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", player_wins_expected_prev);
		$display ("     Real value = %b", player_wins_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_player_wins_exp[1] = player_wins_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module g03_lab5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg hit;
reg led_mode;
reg new_hand;
reg reset;
reg stay;
// wires                                               
wire [5:0] dealer_hand;
wire dealer_led0;
wire dealer_led1;
wire dealer_led2;
wire [1:0] dealer_wins;
wire game_over;
wire [6:0] led_floor_dealer;
wire [6:0] led_floor_player;
wire [6:0] led_mod_dealer;
wire [6:0] led_mod_player;
wire [5:0] num_cards;
wire [5:0] player_hand;
wire player_led0;
wire player_led1;
wire player_led2;
wire [1:0] player_wins;
wire [3:0] state_out;

wire sampler;                             

// assign statements (if any)                          
g03_lab5 i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.dealer_hand(dealer_hand),
	.dealer_led0(dealer_led0),
	.dealer_led1(dealer_led1),
	.dealer_led2(dealer_led2),
	.dealer_wins(dealer_wins),
	.game_over(game_over),
	.hit(hit),
	.led_floor_dealer(led_floor_dealer),
	.led_floor_player(led_floor_player),
	.led_mod_dealer(led_mod_dealer),
	.led_mod_player(led_mod_player),
	.led_mode(led_mode),
	.new_hand(new_hand),
	.num_cards(num_cards),
	.player_hand(player_hand),
	.player_led0(player_led0),
	.player_led1(player_led1),
	.player_led2(player_led2),
	.player_wins(player_wins),
	.reset(reset),
	.state_out(state_out),
	.stay(stay)
);

// hit
initial
begin
	hit = 1'b1;
	hit = #60000 1'b0;
	hit = #40000 1'b1;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #50000 1'b1;
end 

// stay
initial
begin
	stay = 1'b1;
	stay = #110000 1'b0;
	stay = #40000 1'b1;
end 

// new_hand
initial
begin
	new_hand = 1'b1;
end 

// led_mode
initial
begin
	led_mode = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 

g03_lab5_vlg_sample_tst tb_sample (
	.clk(clk),
	.hit(hit),
	.led_mode(led_mode),
	.new_hand(new_hand),
	.reset(reset),
	.stay(stay),
	.sampler_tx(sampler)
);

g03_lab5_vlg_check_tst tb_out(
	.dealer_hand(dealer_hand),
	.dealer_led0(dealer_led0),
	.dealer_led1(dealer_led1),
	.dealer_led2(dealer_led2),
	.dealer_wins(dealer_wins),
	.game_over(game_over),
	.led_floor_dealer(led_floor_dealer),
	.led_floor_player(led_floor_player),
	.led_mod_dealer(led_mod_dealer),
	.led_mod_player(led_mod_player),
	.num_cards(num_cards),
	.player_hand(player_hand),
	.player_led0(player_led0),
	.player_led1(player_led1),
	.player_led2(player_led2),
	.player_wins(player_wins),
	.state_out(state_out),
	.sampler_rx(sampler)
);
endmodule

